module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)
-}

import Expect
import NestedTuple
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "readme"
            [ Test.describe
                "code snippet 0"
                [ Test.test
                    "0"
                    (\() ->
                        myTuple__Readme_0 |> Expect.equal ( 1, ( "hello", () ) )
                    )
                , Test.test
                    "1"
                    (\() ->
                        myMapper__Readme_0 myTuple__Readme_0
                            |> Expect.equal ( 2, ( "hello world", () ) )
                    )
                , Test.test
                    "2"
                    (\() ->
                        myFolder__Readme_0 0 myTuple__Readme_0 |> Expect.equal 7
                    )
                ]
            ]
        , Test.describe
            "NestedTuple"
            [ Test.describe
                "appender"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            NestedTuple.define
                                |> NestedTuple.appender 1
                                |> NestedTuple.endAppender
                                |> Expect.equal ( 1, () )
                        )
                    , Test.test
                        "1"
                        (\() ->
                            NestedTuple.define
                                |> NestedTuple.appender "hello"
                                |> NestedTuple.appender "world"
                                |> NestedTuple.endAppender
                                |> Expect.equal ( "hello", ( "world", () ) )
                        )
                    ]
                ]
            , Test.describe
                "folder"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            sum__NestedTuple__folder_0 0 ( 1, ( "foo", () ) )
                                |> Expect.equal 4
                        )
                    ]
                ]
            , Test.describe
                "folder2"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            sum__NestedTuple__folder2_0
                                0
                                ( 1, ( "foo", () ) )
                                ( 2, ( "bar", () ) )
                                |> Expect.equal 9
                        )
                    ]
                ]
            , Test.describe
                "folder3"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            sum__NestedTuple__folder3_0
                                0
                                ( 1, ( "foo", () ) )
                                ( 2, ( "bar", () ) )
                                ( 3, ( "baz", () ) )
                                |> Expect.equal 15
                        )
                    ]
                ]
            , Test.describe
                "mapper"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            double__NestedTuple__mapper_0 ( 1, ( 1.5, () ) )
                                |> Expect.equal ( 2, ( 3, () ) )
                        )
                    ]
                ]
            , Test.describe
                "mapper2"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            add__NestedTuple__mapper2_0
                                ( 1, ( 1.5, () ) )
                                ( 2, ( 2.5, () ) )
                                |> Expect.equal ( 3, ( 4, () ) )
                        )
                    ]
                ]
            , Test.describe
                "mapper3"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            add__NestedTuple__mapper3_0
                                ( 1, ( 1.5, () ) )
                                ( 2, ( 2.5, () ) )
                                ( 3, ( 3.5, () ) )
                                |> Expect.equal ( 6, ( 7.5, () ) )
                        )
                    ]
                ]
            ]
        ]


myTuple__Readme_0 =
    NestedTuple.cons 1 (NestedTuple.cons "hello" NestedTuple.empty)


myMapper__Readme_0 =
    NestedTuple.define
        |> NestedTuple.mapper (\int -> int * 2)
        |> NestedTuple.mapper (\str -> str ++ " world")
        |> NestedTuple.endMapper


myFolder__Readme_0 =
    NestedTuple.define
        |> NestedTuple.folder (\int acc -> int * 2 + acc)
        |> NestedTuple.folder (\str acc -> String.length str + acc)
        |> NestedTuple.endFolder


sum__NestedTuple__folder_0 =
    NestedTuple.define
        |> NestedTuple.folder (\int acc -> int + acc)
        |> NestedTuple.folder (\str acc -> String.length str + acc)
        |> NestedTuple.endFolder


sum__NestedTuple__folder2_0 =
    NestedTuple.define
        |> NestedTuple.folder2 (\int1 int2 acc -> int1 + int2 + acc)
        |> NestedTuple.folder2
            (\str1 str2 acc -> String.length (str1 ++ str2) + acc)
        |> NestedTuple.endFolder2


sum__NestedTuple__folder3_0 =
    NestedTuple.define
        |> NestedTuple.folder3 (\int1 int2 int3 acc -> int1 + int2 + int3 + acc)
        |> NestedTuple.folder3
            (\str1 str2 str3 acc -> String.length (str1 ++ str2 ++ str3) + acc)
        |> NestedTuple.endFolder3


double__NestedTuple__mapper_0 =
    NestedTuple.define
        |> NestedTuple.mapper (\int -> int * 2)
        |> NestedTuple.mapper (\float -> float + float)
        |> NestedTuple.endMapper


add__NestedTuple__mapper2_0 =
    NestedTuple.define
        |> NestedTuple.mapper2 (\int1 int2 -> int1 + int2)
        |> NestedTuple.mapper2 (\float1 float2 -> float1 + float2)
        |> NestedTuple.endMapper2


add__NestedTuple__mapper3_0 =
    NestedTuple.define
        |> NestedTuple.mapper3 (\int1 int2 int3 -> int1 + int2 + int3)
        |> NestedTuple.mapper3
            (\float1 float2 float3 -> float1 + float2 + float3)
        |> NestedTuple.endMapper3
